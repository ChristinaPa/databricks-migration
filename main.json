{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.9.1.41621",
      "templateHash": "6020114090823962101"
    }
  },
  "parameters": {
    "eventHubSku": {
      "type": "string",
      "defaultValue": "Standard",
      "allowedValues": [
        "Basic",
        "Standard"
      ]
    },
    "blobAccountName": {
      "type": "string",
      "defaultValue": "[format('adls{0}', uniqueString(resourceGroup().id))]"
    },
    "containerName": {
      "type": "string",
      "defaultValue": "data"
    },
    "eHRuleName": {
      "type": "string",
      "defaultValue": "rule",
      "metadata": {
        "description": ""
      }
    },
    "fileuploaduri": {
      "type": "string",
      "defaultValue": "https://raw.githubusercontent.com/DatabricksFactory/databricks-migration/main/InfrastructurePlaneDeployment.ps1",
      "metadata": {
        "description": "The URI of script file to upload blob container"
      }
    },
    "identityName": {
      "type": "string",
      "defaultValue": "PostDeploymentScriptuserAssignedName",
      "metadata": {
        "description": "Name of identity"
      }
    },
    "uniqueSuffix": {
      "type": "string",
      "defaultValue": "[substring(uniqueString(resourceGroup().id), 0, 6)]",
      "metadata": {
        "description": "Unique Suffix"
      }
    },
    "firstuniquestring": {
      "type": "string",
      "defaultValue": "[format('firstunique{0}', parameters('uniqueSuffix'))]",
      "metadata": {
        "description": "firstuniquestring"
      }
    },
    "seconduniquestring": {
      "type": "string",
      "defaultValue": "[format('secondunique{0}', parameters('uniqueSuffix'))]",
      "metadata": {
        "description": "seconduniquestring"
      }
    },
    "utcValue": {
      "type": "string",
      "defaultValue": "[utcNow()]"
    },
    "ctrlDeployStorageAccount": {
      "type": "bool",
      "defaultValue": true
    },
    "ctrlDeployKeyVault": {
      "type": "bool",
      "defaultValue": true
    },
    "ctrlDeployEventHub": {
      "type": "bool",
      "defaultValue": true
    },
    "ctrlDeployCluster": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Controls the execution of cluster deployment script"
      }
    },
    "ctrlDeployNotebook": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Controls the execution of notebook deployment script"
      }
    },
    "ctrlDeployPipeline": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Controls the execution of pipeline deployment script"
      }
    },
    "lifetimeSeconds": {
      "type": "int",
      "defaultValue": 1200,
      "metadata": {
        "description": "Time to live of the Databricks token in seconds"
      }
    },
    "comment": {
      "type": "string",
      "defaultValue": "ARM deployment",
      "metadata": {
        "description": "Side note on the token generation"
      }
    },
    "clusterName": {
      "type": "string",
      "defaultValue": "dbcluster",
      "metadata": {
        "description": "Name of the Databricks cluster"
      }
    },
    "sparkVersion": {
      "type": "string",
      "defaultValue": "11.3.x-scala2.12",
      "metadata": {
        "description": "Version of Spark in the cluster"
      }
    },
    "autoTerminationMinutes": {
      "type": "int",
      "defaultValue": 30,
      "metadata": {
        "description": "Cluster terminates after specified minutes of inactivity"
      }
    },
    "numWorkers": {
      "type": "string",
      "defaultValue": "2",
      "metadata": {
        "description": "Number of worker nodes"
      }
    },
    "nodeTypeId": {
      "type": "string",
      "defaultValue": "Standard_DS3_v2",
      "metadata": {
        "description": "Type of worker node"
      }
    },
    "driverNodeTypeId": {
      "type": "string",
      "defaultValue": "Standard_DS3_v2",
      "metadata": {
        "description": "Type of driver node"
      }
    },
    "retryLimit": {
      "type": "int",
      "defaultValue": 15,
      "metadata": {
        "description": "Max number of retries"
      }
    },
    "retryTime": {
      "type": "int",
      "defaultValue": 60,
      "metadata": {
        "description": "Interval between each retries in seconds"
      }
    },
    "disablePublicIp": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Specifies whether to deploy Azure Databricks workspace with secure cluster connectivity (SCC) enabled or not (No Public IP)."
      }
    },
    "nsgName": {
      "type": "string",
      "defaultValue": "databricks-nsg",
      "metadata": {
        "description": "The name of the network security group to create."
      }
    },
    "pricingTier": {
      "type": "string",
      "defaultValue": "premium",
      "allowedValues": [
        "trial",
        "standard",
        "premium"
      ],
      "metadata": {
        "description": "The pricing tier of workspace."
      }
    },
    "privateSubnetCidr": {
      "type": "string",
      "defaultValue": "10.179.0.0/18",
      "metadata": {
        "description": "CIDR range for the private subnet."
      }
    },
    "privateSubnetName": {
      "type": "string",
      "defaultValue": "private-subnet",
      "metadata": {
        "description": "The name of the private subnet to create."
      }
    },
    "publicNetworkAccess": {
      "type": "string",
      "defaultValue": "Enabled",
      "allowedValues": [
        "Enabled",
        "Disabled"
      ],
      "metadata": {
        "description": "Indicates whether public network access is allowed to the workspace with private endpoint - possible values are Enabled or Disabled."
      }
    },
    "publicSubnetCidr": {
      "type": "string",
      "defaultValue": "10.179.64.0/18",
      "metadata": {
        "description": "CIDR range for the public subnet."
      }
    },
    "privateEndpointSubnetCidr": {
      "type": "string",
      "defaultValue": "10.179.128.0/24",
      "metadata": {
        "description": "CIDR range for the private endpoint subnet.."
      }
    },
    "publicSubnetName": {
      "type": "string",
      "defaultValue": "public-subnet",
      "metadata": {
        "description": "The name of the public subnet to create."
      }
    },
    "requiredNsgRules": {
      "type": "string",
      "defaultValue": "NoAzureDatabricksRules",
      "allowedValues": [
        "AllRules",
        "NoAzureDatabricksRules"
      ],
      "metadata": {
        "description": "Indicates whether to retain or remove the AzureDatabricks outbound NSG rule - possible values are AllRules or NoAzureDatabricksRules."
      }
    },
    "vnetCidr": {
      "type": "string",
      "defaultValue": "10.179.0.0/16",
      "metadata": {
        "description": "CIDR range for the vnet."
      }
    },
    "vnetName": {
      "type": "string",
      "defaultValue": "databricks-vnet",
      "metadata": {
        "description": "The name of the virtual network to create."
      }
    },
    "PrivateEndpointSubnetName": {
      "type": "string",
      "defaultValue": "default",
      "metadata": {
        "description": "The name of the subnet to create the private endpoint in."
      }
    },
    "workspaceName": {
      "type": "string",
      "defaultValue": "default",
      "metadata": {
        "description": "The name of the Azure Databricks workspace to create."
      }
    }
  },
  "variables": {
    "fileuploadurivariable": "[parameters('fileuploaduri')]",
    "scriptParametersToUploadFile": "[format('-RG_NAME {0} -REGION {1} -WORKSPACE_NAME {2} -LIFETIME_SECONDS {3} -COMMENT {4} -CLUSTER_NAME {5} -SPARK_VERSION {6} -AUTOTERMINATION_MINUTES {7} -NUM_WORKERS {8} -NODE_TYPE_ID {9} -DRIVER_NODE_TYPE_ID {10} -RETRY_LIMIT {11} -RETRY_TIME {12} -CTRL_DEPLOY_CLUSTER {13}', resourceGroup().name, variables('location'), parameters('workspaceName'), parameters('lifetimeSeconds'), parameters('comment'), parameters('clusterName'), parameters('sparkVersion'), parameters('autoTerminationMinutes'), parameters('numWorkers'), parameters('nodeTypeId'), parameters('driverNodeTypeId'), parameters('retryLimit'), parameters('retryTime'), if(parameters('ctrlDeployCluster'), '$true', '$false'))]",
    "contributorRoleDefinitionId": "B24988ac-6180-42a0-ab88-20f7382dd24c",
    "bootstrapRoleAssignmentId_var": "[guid(parameters('firstuniquestring'), parameters('seconduniquestring'))]",
    "randomString": "[substring(guid(resourceGroup().id), 0, 6)]",
    "location": "[resourceGroup().location]",
    "eventHubNamespaceName": "[format('streamdata-{0}-ns', variables('randomString'))]",
    "eventHubName": "[format('streamdata-{0}-ns', variables('randomString'))]",
    "managedResourceGroupName": "[format('databricks-rg-{0}-{1}', parameters('workspaceName'), uniqueString(parameters('workspaceName'), resourceGroup().id))]",
    "trimmedMRGName": "[substring(variables('managedResourceGroupName'), 0, min(length(variables('managedResourceGroupName')), 90))]",
    "managedResourceGroupId": "[format('{0}/resourceGroups/{1}', subscription().id, variables('trimmedMRGName'))]",
    "privateEndpointName": "[format('{0}-pvtEndpoint', parameters('workspaceName'))]",
    "privateDnsZoneName": "privatelink.azuredatabricks.net",
    "pvtEndpointDnsGroupName": "[format('{0}/mydnsgroupname', variables('privateEndpointName'))]",
    "privateEndpointNamestorage": "storage-pvtEndpoint",
    "privateDnsZoneNamestorage": "[format('privatelink.dfs.{0}', environment().suffixes.storage)]",
    "pvtEndpointDnsGroupNamestorage": "storage-pvtEndpoint/mydnsgroupname",
    "privateEndpointNamevault": "keyvault-pvtEndpoint",
    "privateDnsZoneNamevault": "privatelink.vaultcore.azure.net",
    "pvtEndpointDnsGroupNamevault": "keyvault-pvtEndpoint/mydnsgroupname",
    "privateEndpointNameeventhub": "eventhub-pvtEndpoint",
    "privateDnsZoneNameeventhub": "privatelink.servicebus.windows.net",
    "pvtEndpointDnsGroupNameeventhub": "eventhub-pvtEndpoint/mydnsgroupname",
    "targetSubResourceDfs": "dfs",
    "targetSubResourceVault": "vault",
    "targetSubResourceEventHub": "namespace"
  },
  "resources": [
    {
      "type": "Microsoft.Network/networkSecurityGroups",
      "apiVersion": "2021-03-01",
      "name": "[parameters('nsgName')]",
      "location": "[variables('location')]",
      "properties": {
        "securityRules": [
          {
            "name": "Microsoft.Databricks-workspaces_UseOnly_databricks-worker-to-worker-inbound",
            "properties": {
              "description": "Required for worker nodes communication within a cluster.",
              "protocol": "*",
              "sourcePortRange": "*",
              "destinationPortRange": "*",
              "sourceAddressPrefix": "VirtualNetwork",
              "destinationAddressPrefix": "VirtualNetwork",
              "access": "Allow",
              "priority": 100,
              "direction": "Inbound"
            }
          },
          {
            "name": "Microsoft.Databricks-workspaces_UseOnly_databricks-worker-to-databricks-webapp",
            "properties": {
              "description": "Required for workers communication with Databricks Webapp.",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "443",
              "sourceAddressPrefix": "VirtualNetwork",
              "destinationAddressPrefix": "AzureDatabricks",
              "access": "Allow",
              "priority": 100,
              "direction": "Outbound"
            }
          },
          {
            "name": "Microsoft.Databricks-workspaces_UseOnly_databricks-worker-to-sql",
            "properties": {
              "description": "Required for workers communication with Azure SQL services.",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "3306",
              "sourceAddressPrefix": "VirtualNetwork",
              "destinationAddressPrefix": "Sql",
              "access": "Allow",
              "priority": 101,
              "direction": "Outbound"
            }
          },
          {
            "name": "Microsoft.Databricks-workspaces_UseOnly_databricks-worker-to-storage",
            "properties": {
              "description": "Required for workers communication with Azure Storage services.",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "443",
              "sourceAddressPrefix": "VirtualNetwork",
              "destinationAddressPrefix": "Storage",
              "access": "Allow",
              "priority": 102,
              "direction": "Outbound"
            }
          },
          {
            "name": "Microsoft.Databricks-workspaces_UseOnly_databricks-worker-to-worker-outbound",
            "properties": {
              "description": "Required for worker nodes communication within a cluster.",
              "protocol": "*",
              "sourcePortRange": "*",
              "destinationPortRange": "*",
              "sourceAddressPrefix": "VirtualNetwork",
              "destinationAddressPrefix": "VirtualNetwork",
              "access": "Allow",
              "priority": 103,
              "direction": "Outbound"
            }
          },
          {
            "name": "Microsoft.Databricks-workspaces_UseOnly_databricks-worker-to-eventhub",
            "properties": {
              "description": "Required for worker communication with Azure Eventhub services.",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "9093",
              "sourceAddressPrefix": "VirtualNetwork",
              "destinationAddressPrefix": "EventHub",
              "access": "Allow",
              "priority": 104,
              "direction": "Outbound"
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/virtualNetworks",
      "apiVersion": "2021-08-01",
      "name": "[parameters('vnetName')]",
      "location": "[variables('location')]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[parameters('vnetCidr')]"
          ]
        },
        "subnets": [
          {
            "name": "[parameters('publicSubnetName')]",
            "properties": {
              "addressPrefix": "[parameters('publicSubnetCidr')]",
              "networkSecurityGroup": {
                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('nsgName'))]"
              },
              "serviceEndpoints": [
                {
                  "service": "Microsoft.Storage",
                  "locations": [
                    "[resourceGroup().location]"
                  ]
                }
              ],
              "delegations": [
                {
                  "name": "databricks-del-public",
                  "properties": {
                    "serviceName": "Microsoft.Databricks/workspaces"
                  }
                }
              ]
            }
          },
          {
            "name": "[parameters('privateSubnetName')]",
            "properties": {
              "addressPrefix": "[parameters('privateSubnetCidr')]",
              "networkSecurityGroup": {
                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('nsgName'))]"
              },
              "delegations": [
                {
                  "name": "databricks-del-private",
                  "properties": {
                    "serviceName": "Microsoft.Databricks/workspaces"
                  }
                }
              ]
            }
          },
          {
            "name": "[parameters('PrivateEndpointSubnetName')]",
            "properties": {
              "addressPrefix": "[parameters('privateEndpointSubnetCidr')]",
              "privateEndpointNetworkPolicies": "Disabled"
            }
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('nsgName'))]"
      ]
    },
    {
      "type": "Microsoft.Databricks/workspaces",
      "apiVersion": "2018-04-01",
      "name": "[parameters('workspaceName')]",
      "location": "[variables('location')]",
      "sku": {
        "name": "[parameters('pricingTier')]"
      },
      "properties": {
        "managedResourceGroupId": "[variables('managedResourceGroupId')]",
        "parameters": {
          "customVirtualNetworkId": {
            "value": "[resourceId('Microsoft.Network/virtualNetworks', parameters('vnetName'))]"
          },
          "customPublicSubnetName": {
            "value": "[parameters('publicSubnetName')]"
          },
          "customPrivateSubnetName": {
            "value": "[parameters('privateSubnetName')]"
          },
          "enableNoPublicIp": {
            "value": "[parameters('disablePublicIp')]"
          }
        },
        "publicNetworkAccess": "[parameters('publicNetworkAccess')]",
        "requiredNsgRules": "[parameters('requiredNsgRules')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks', parameters('vnetName'))]"
      ]
    },
    {
      "type": "Microsoft.Network/privateEndpoints",
      "apiVersion": "2021-08-01",
      "name": "[variables('privateEndpointName')]",
      "location": "[variables('location')]",
      "properties": {
        "subnet": {
          "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('PrivateEndpointSubnetName'))]"
        },
        "privateLinkServiceConnections": [
          {
            "name": "[variables('privateEndpointName')]",
            "properties": {
              "privateLinkServiceId": "[resourceId('Microsoft.Databricks/workspaces', parameters('workspaceName'))]",
              "groupIds": [
                "databricks_ui_api"
              ]
            }
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.Databricks/workspaces', parameters('workspaceName'))]"
      ]
    },
    {
      "type": "Microsoft.Network/privateDnsZones",
      "apiVersion": "2020-06-01",
      "name": "[variables('privateDnsZoneName')]",
      "location": "global",
      "dependsOn": [
        "[resourceId('Microsoft.Network/privateEndpoints', variables('privateEndpointName'))]"
      ]
    },
    {
      "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
      "apiVersion": "2020-06-01",
      "name": "[format('{0}/{1}', variables('privateDnsZoneName'), format('{0}-link', variables('privateDnsZoneName')))]",
      "location": "global",
      "properties": {
        "registrationEnabled": false,
        "virtualNetwork": {
          "id": "[resourceId('Microsoft.Network/virtualNetworks', parameters('vnetName'))]"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/privateDnsZones', variables('privateDnsZoneName'))]",
        "[resourceId('Microsoft.Network/virtualNetworks', parameters('vnetName'))]"
      ]
    },
    {
      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
      "apiVersion": "2021-12-01",
      "name": "[variables('pvtEndpointDnsGroupName')]",
      "properties": {
        "privateDnsZoneConfigs": [
          {
            "name": "config1",
            "properties": {
              "privateDnsZoneId": "[resourceId('Microsoft.Network/privateDnsZones', variables('privateDnsZoneName'))]"
            }
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/privateDnsZones', variables('privateDnsZoneName'))]",
        "[resourceId('Microsoft.Network/privateEndpoints', variables('privateEndpointName'))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deploymentScripts",
      "apiVersion": "2020-10-01",
      "name": "PostDeploymentScriptForFileUpload",
      "location": "[variables('location')]",
      "kind": "AzurePowerShell",
      "identity": {
        "type": "UserAssigned",
        "userAssignedIdentities": {
          "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('identityName')))]": {}
        }
      },
      "properties": {
        "azPowerShellVersion": "7.2.4",
        "cleanupPreference": "OnSuccess",
        "retentionInterval": "P1D",
        "timeout": "PT30M",
        "arguments": "[variables('scriptParametersToUploadFile')]",
        "primaryScriptUri": "[variables('fileuploadurivariable')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Databricks/workspaces', parameters('workspaceName'))]",
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('identityName'))]"
      ]
    },
    {
      "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
      "apiVersion": "2018-11-30",
      "name": "[parameters('identityName')]",
      "location": "[variables('location')]"
    },
    {
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2018-09-01-preview",
      "name": "[variables('bootstrapRoleAssignmentId_var')]",
      "properties": {
        "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('contributorRoleDefinitionId'))]",
        "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('identityName')), '2018-11-30').principalId]",
        "scope": "[resourceGroup().id]",
        "principalType": "ServicePrincipal"
      },
      "dependsOn": [
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('identityName'))]"
      ]
    },
    {
      "condition": "[parameters('ctrlDeployStorageAccount')]",
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2021-04-01",
      "name": "[parameters('blobAccountName')]",
      "location": "[variables('location')]",
      "kind": "StorageV2",
      "sku": {
        "name": "Standard_LRS"
      },
      "properties": {
        "isHnsEnabled": true,
        "networkAcls": {
          "bypass": "AzureServices",
          "virtualNetworkRules": [
            {
              "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('publicSubnetName'))]",
              "action": "Allow",
              "state": "succeeded"
            }
          ],
          "ipRules": [],
          "defaultAction": "Allow"
        },
        "minimumTlsVersion": "TLS1_2",
        "allowBlobPublicAccess": false,
        "supportsHttpsTrafficOnly": true,
        "accessTier": "Hot"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks', parameters('vnetName'))]"
      ]
    },
    {
      "condition": "[parameters('ctrlDeployStorageAccount')]",
      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
      "apiVersion": "2021-06-01",
      "name": "[format('{0}/default/{1}', parameters('blobAccountName'), parameters('containerName'))]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', parameters('blobAccountName'))]"
      ]
    },
    {
      "type": "Microsoft.Network/privateEndpoints",
      "apiVersion": "2021-08-01",
      "name": "[variables('privateEndpointNamestorage')]",
      "location": "[variables('location')]",
      "properties": {
        "subnet": {
          "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('PrivateEndpointSubnetName'))]"
        },
        "privateLinkServiceConnections": [
          {
            "name": "[variables('privateEndpointNamestorage')]",
            "properties": {
              "privateLinkServiceId": "[resourceId('Microsoft.Storage/storageAccounts', parameters('blobAccountName'))]",
              "groupIds": [
                "[variables('targetSubResourceDfs')]"
              ]
            }
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', parameters('blobAccountName'))]"
      ]
    },
    {
      "type": "Microsoft.Network/privateDnsZones",
      "apiVersion": "2020-06-01",
      "name": "[variables('privateDnsZoneNamestorage')]",
      "location": "global",
      "dependsOn": [
        "[resourceId('Microsoft.Network/privateEndpoints', variables('privateEndpointNamestorage'))]"
      ]
    },
    {
      "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
      "apiVersion": "2020-06-01",
      "name": "[format('{0}/{1}', variables('privateDnsZoneNamestorage'), format('{0}-link', variables('privateDnsZoneNamestorage')))]",
      "location": "global",
      "properties": {
        "registrationEnabled": false,
        "virtualNetwork": {
          "id": "[resourceId('Microsoft.Network/virtualNetworks', parameters('vnetName'))]"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/privateDnsZones', variables('privateDnsZoneNamestorage'))]",
        "[resourceId('Microsoft.Network/virtualNetworks', parameters('vnetName'))]"
      ]
    },
    {
      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
      "apiVersion": "2021-12-01",
      "name": "[variables('pvtEndpointDnsGroupNamestorage')]",
      "properties": {
        "privateDnsZoneConfigs": [
          {
            "name": "config1storage",
            "properties": {
              "privateDnsZoneId": "[resourceId('Microsoft.Network/privateDnsZones', variables('privateDnsZoneNamestorage'))]"
            }
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/privateDnsZones', variables('privateDnsZoneNamestorage'))]",
        "[resourceId('Microsoft.Network/privateEndpoints', variables('privateEndpointNamestorage'))]"
      ]
    },
    {
      "condition": "[parameters('ctrlDeployEventHub')]",
      "type": "Microsoft.EventHub/namespaces",
      "apiVersion": "2021-11-01",
      "name": "[variables('eventHubNamespaceName')]",
      "location": "[variables('location')]",
      "sku": {
        "name": "[parameters('eventHubSku')]",
        "tier": "[parameters('eventHubSku')]",
        "capacity": 1
      },
      "properties": {
        "isAutoInflateEnabled": false,
        "maximumThroughputUnits": 0
      }
    },
    {
      "condition": "[parameters('ctrlDeployEventHub')]",
      "type": "Microsoft.EventHub/namespaces/eventhubs",
      "apiVersion": "2021-01-01-preview",
      "name": "[format('{0}/{1}', variables('eventHubNamespaceName'), variables('eventHubName'))]",
      "properties": {
        "messageRetentionInDays": 7,
        "partitionCount": 1
      },
      "dependsOn": [
        "[resourceId('Microsoft.EventHub/namespaces', variables('eventHubNamespaceName'))]"
      ]
    },
    {
      "condition": "[parameters('ctrlDeployEventHub')]",
      "type": "Microsoft.EventHub/namespaces/eventhubs/authorizationRules",
      "apiVersion": "2021-01-01-preview",
      "name": "[format('{0}/{1}/{2}', variables('eventHubNamespaceName'), variables('eventHubName'), parameters('eHRuleName'))]",
      "properties": {
        "rights": [
          "Send",
          "Listen"
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.EventHub/namespaces/eventhubs', variables('eventHubNamespaceName'), variables('eventHubName'))]"
      ]
    },
    {
      "type": "Microsoft.Network/privateEndpoints",
      "apiVersion": "2021-08-01",
      "name": "[variables('privateEndpointNameeventhub')]",
      "location": "[variables('location')]",
      "properties": {
        "subnet": {
          "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('PrivateEndpointSubnetName'))]"
        },
        "privateLinkServiceConnections": [
          {
            "name": "[variables('privateEndpointNameeventhub')]",
            "properties": {
              "privateLinkServiceId": "[resourceId('Microsoft.EventHub/namespaces', variables('eventHubNamespaceName'))]",
              "groupIds": [
                "[variables('targetSubResourceEventHub')]"
              ]
            }
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.EventHub/namespaces', variables('eventHubNamespaceName'))]"
      ]
    },
    {
      "type": "Microsoft.Network/privateDnsZones",
      "apiVersion": "2020-06-01",
      "name": "[variables('privateDnsZoneNameeventhub')]",
      "location": "global",
      "dependsOn": [
        "[resourceId('Microsoft.Network/privateEndpoints', variables('privateEndpointNameeventhub'))]"
      ]
    },
    {
      "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
      "apiVersion": "2020-06-01",
      "name": "[format('{0}/{1}', variables('privateDnsZoneNameeventhub'), format('{0}-link', variables('privateDnsZoneNameeventhub')))]",
      "location": "global",
      "properties": {
        "registrationEnabled": false,
        "virtualNetwork": {
          "id": "[resourceId('Microsoft.Network/virtualNetworks', parameters('vnetName'))]"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/privateDnsZones', variables('privateDnsZoneNameeventhub'))]",
        "[resourceId('Microsoft.Network/virtualNetworks', parameters('vnetName'))]"
      ]
    },
    {
      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
      "apiVersion": "2021-12-01",
      "name": "[variables('pvtEndpointDnsGroupNameeventhub')]",
      "properties": {
        "privateDnsZoneConfigs": [
          {
            "name": "config1eventhub",
            "properties": {
              "privateDnsZoneId": "[resourceId('Microsoft.Network/privateDnsZones', variables('privateDnsZoneNameeventhub'))]"
            }
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/privateDnsZones', variables('privateDnsZoneNameeventhub'))]",
        "[resourceId('Microsoft.Network/privateEndpoints', variables('privateEndpointNameeventhub'))]"
      ]
    },
    {
      "condition": "[parameters('ctrlDeployKeyVault')]",
      "type": "Microsoft.KeyVault/vaults",
      "apiVersion": "2021-04-01-preview",
      "name": "[format('vault{0}', parameters('utcValue'))]",
      "location": "[variables('location')]",
      "properties": {
        "sku": {
          "family": "A",
          "name": "standard"
        },
        "softDeleteRetentionInDays": 7,
        "networkAcls": {
          "defaultAction": "Deny",
          "bypass": "AzureServices",
          "ipRules": [],
          "virtualNetworkRules": []
        },
        "tenantId": "[subscription().tenantId]",
        "accessPolicies": []
      }
    },
    {
      "type": "Microsoft.Network/privateEndpoints",
      "apiVersion": "2021-08-01",
      "name": "[variables('privateEndpointNamevault')]",
      "location": "[variables('location')]",
      "properties": {
        "subnet": {
          "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('PrivateEndpointSubnetName'))]"
        },
        "privateLinkServiceConnections": [
          {
            "name": "[variables('privateEndpointNamevault')]",
            "properties": {
              "privateLinkServiceId": "[resourceId('Microsoft.KeyVault/vaults', format('vault{0}', parameters('utcValue')))]",
              "groupIds": [
                "[variables('targetSubResourceVault')]"
              ]
            }
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', format('vault{0}', parameters('utcValue')))]"
      ]
    },
    {
      "type": "Microsoft.Network/privateDnsZones",
      "apiVersion": "2020-06-01",
      "name": "[variables('privateDnsZoneNamevault')]",
      "location": "global",
      "dependsOn": [
        "[resourceId('Microsoft.Network/privateEndpoints', variables('privateEndpointNamevault'))]"
      ]
    },
    {
      "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
      "apiVersion": "2020-06-01",
      "name": "[format('{0}/{1}', variables('privateDnsZoneNamevault'), format('{0}-link', variables('privateDnsZoneNamevault')))]",
      "location": "global",
      "properties": {
        "registrationEnabled": false,
        "virtualNetwork": {
          "id": "[resourceId('Microsoft.Network/virtualNetworks', parameters('vnetName'))]"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/privateDnsZones', variables('privateDnsZoneNamevault'))]",
        "[resourceId('Microsoft.Network/virtualNetworks', parameters('vnetName'))]"
      ]
    },
    {
      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
      "apiVersion": "2021-12-01",
      "name": "[variables('pvtEndpointDnsGroupNamevault')]",
      "properties": {
        "privateDnsZoneConfigs": [
          {
            "name": "config1vault",
            "properties": {
              "privateDnsZoneId": "[resourceId('Microsoft.Network/privateDnsZones', variables('privateDnsZoneNamevault'))]"
            }
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/privateDnsZones', variables('privateDnsZoneNamevault'))]",
        "[resourceId('Microsoft.Network/privateEndpoints', variables('privateEndpointNamevault'))]"
      ]
    }
  ]
}
